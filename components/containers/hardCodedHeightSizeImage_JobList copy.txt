import React, { FC, useEffect, useState } from 'react';
import {
   Button,
   FlatList,
   Image,
   ImageSourcePropType,
   StyleSheet,
   Text,
   View,
} from 'react-native';
import { format } from 'date-fns';

import { IJob } from '../../models/jobs.model';
import { ICompany } from '../../models/company.model';

const styles = StyleSheet.create({
   container: {
      marginTop: 22,
   },
   itemContainer: {
      flex: 1,
      flexDirection: 'column',
      // padding: 5,
      paddingVertical: 8,
      paddingHorizontal: 6,
      // borderBottomColor: '#ddd',
      // borderBottomWidth: 1,
      position: 'relative',
      backgroundColor: '#FEE9D5',
      borderWidth: 1,
      borderColor: '#FECDAB',
      borderRadius: 15,
      marginVertical: 5,
      marginHorizontal: 5,
   },
   headContainer: {
      flexDirection: 'row',
      alignItems: 'center',
   },
   headLeftContainer: {
      flex: 1,
      flexShrink: 1,
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: 5,
      padding: 5,
      width: 70,
      height: 70,
      maxWidth: 70,
      minWidth: 70,
      position: 'relative',
      // borderWidth: 1,
      // borderColor: '#A3A3A3',
   },
   headRightContainer: {
      flexGrow: 1,
   },
   imageContainer: {
      width: '100%',
      height: '100%',
   },
   companyAndDateContainer: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      paddingBottom: 5,
   },
   companyNameText: {
      color: '#046B99',
      fontWeight: 'bold',
   },
   dateText: {
      fontSize: 12,
      color: '#046B99',
      paddingRight: 3,
   },
   titleContainer: {
      flexDirection: 'row',
      alignItems: 'center',
   },
   tagNew: {
      backgroundColor: '#FF2424',
      color: '#FFF',
      fontSize: 10,
      fontWeight: 'bold',
      letterSpacing: 1,
      paddingVertical: 3,
      paddingHorizontal: 4,
      marginLeft: 6,
      borderRadius: 3,
   },
   titleText: {
      fontSize: 20,
      fontWeight: 'bold',
      color: '#222',
   },
   infoContainer: {
      flexDirection: 'row',
      paddingBottom: 8,
   },
   infoText: {
      fontSize: 14,
      fontWeight: 'bold',
      color: '#AF6D01',
   },
   infoData: {
      fontSize: 14,
      fontWeight: 'bold',
      color: '#AF6D01',
   },
   descriptionText: {
      flex: 1,
      fontSize: 16,
      color: '#1C304A',
      marginBottom: 15,
   },
   bottomContainer: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
   },
   actionButtonsContainer: {
      flexDirection: 'row',
   },
   buttonSeparator: {
      width: 8,
   },
   visitedText: {
      fontSize: 16,
      fontStyle: 'italic',
      color: '#A3A3A3',
      paddingRight: 3,
   },
});

/**
 * 
 *    companyId: string;
   name: string;
   description: string;
   salary: number;
   currency: string;
   vacancies: number;
   type: 'remote' | 'mix' | 'presence';
 * 
 */

interface IJobUser extends IJob {
   isVisited: boolean;
   companyName?: string;
   companyImageUrl?: string;
   companyImageDynamicHeight?: number;
}

interface JobListProps {
   jobs: IJobUser[];
   companies: ICompany[];
}

export const JobList: FC<JobListProps> = ({ jobs, companies }) => {
   const formatDate = (date: number): string => {
      let newDate = new Date();
      newDate.setTime(date);
      // return newDate.toLocaleDateString();
      return format(newDate, 'dd/MM/yyyy');
   };

   const isPublishToday = (date: number): boolean => {
      let jobDate = new Date();
      jobDate.setTime(date);
      let todayDate = new Date();
      return format(jobDate, 'dd/MM/yyyy') === format(todayDate, 'dd/MM/yyyy')
         ? true
         : false;
   };

   const getCompanyData = (id: string) => {
      let company = companies.filter((c) => c.id === id)[0];
      return {
         name: company.name,
         imageUrl: company.imageUrl,
      };
   };

   // Get Dynamic Height based on desired width of an image:
   const getImagePromise = (uri: string, desiredWidth: number) =>
      new Promise((resolve, reject) => {
         return Image.getSize(
            uri,
            (width, height) => {
               resolve((height / width) * desiredWidth);
            },
            (error) => {
               reject(error);
            }
         );
      })
         .then((height) => height)
         .catch((error) => {
            return {
               message: error,
            };
         });

   const scaleHeight = async (uri: string, desiredWidth: number) => {
      let height = await getImagePromise(uri, desiredWidth);
      let defaultHeight = 60;
      if (typeof height === 'object') {
         // error Handler...
         return defaultHeight;
      }
      return height;
   };

   let heightSizes: Promise<number>[] = [];
   const jobsMapped = jobs.map((job) => {
      let companyJob = getCompanyData(job.companyId);
      let height = scaleHeight(companyJob.imageUrl, 60);
      heightSizes.push(height as Promise<number>);
      job.companyName = companyJob.name;
      job.companyImageUrl = companyJob.imageUrl;

      return job;
   });

   const [jobsState, setJobsState] = useState<IJobUser[]>([]);

   useEffect(() => {
      Promise.all(heightSizes).then((values) => {
         values.forEach(
            (value, index) =>
               (jobsMapped[index].companyImageDynamicHeight = value)
         );
         setJobsState(jobsMapped);
         console.log(jobsMapped);
      });
   }, [jobs]);

   return (
      <View style={styles.container}>
         <FlatList
            data={jobsState}
            renderItem={({ item: job }) => (
               <View style={styles.itemContainer}>
                  <View style={styles.headContainer}>
                     <View style={styles.headLeftContainer}>
                        <Image
                           style={styles.imageContainer}
                           source={{
                              uri: job.companyImageUrl,
                           }}
                           resizeMode="cover"
                        />
                     </View>
                     <View style={styles.headRightContainer}>
                        <View style={styles.companyAndDateContainer}>
                           <Text style={styles.companyNameText}>
                              {job.companyName}
                           </Text>
                           <Text style={styles.dateText}>
                              {formatDate(job.publishDate)}
                           </Text>
                        </View>
                        <View style={styles.titleContainer}>
                           <Text style={styles.titleText}>{job.name}</Text>
                           {isPublishToday(job.publishDate) && (
                              <Text style={styles.tagNew}>NEW!</Text>
                           )}
                        </View>
                        <View style={styles.infoContainer}>
                           <Text style={styles.infoData}>${job.salary} </Text>
                           <Text style={styles.infoData}>{job.currency}</Text>

                           <Text style={styles.infoText}> | </Text>
                           <Text style={styles.infoData}>{job.type}</Text>

                           <Text style={styles.infoText}> | Vacancies: </Text>
                           <Text style={styles.infoData}>{job.vacancies}</Text>
                        </View>
                     </View>
                  </View>
                  <Text style={styles.descriptionText} numberOfLines={2}>
                     {job.description}
                  </Text>
                  <View style={styles.bottomContainer}>
                     <View style={styles.actionButtonsContainer}>
                        <Button
                           title="Apply Now!"
                           color="#FC552F"
                           onPress={() => alert('You applied!')}
                        />
                        <ButtonSeparator />
                        <Button
                           title="MORE INFO"
                           color="#FD8A62"
                           onPress={() => alert('More more')}
                        />
                     </View>
                     <Text style={styles.visitedText}>
                        {job.isVisited ? 'visited' : ''}
                     </Text>
                  </View>
               </View>
            )}
         />
      </View>
   );
};

const ButtonSeparator = () => <View style={styles.buttonSeparator} />;
